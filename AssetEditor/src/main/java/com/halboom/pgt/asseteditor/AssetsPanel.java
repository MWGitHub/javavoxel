/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.halboom.pgt.asseteditor;

import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MW
 */
public class AssetsPanel extends javax.swing.JPanel {
    /**
     * Callback function when running mouse right click release.
     */
    private AssetEditorCallbacks rightReleaseCallback;

    /**
     * Callback function when a mouse is pressed.
     */
    private AssetEditorCallbacks mousePressCallback;

    /**
     * Callback function when a mouse is clicked.
     */
    private AssetEditorCallbacks doubleClickItemCallback;

    /**
     * Creates new form AssetsPanel.
     */
    public AssetsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
     * Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assetsPane = new javax.swing.JScrollPane();
        assetsTable = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(400, 300));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.BorderLayout());

        assetsPane.setPreferredSize(new java.awt.Dimension(252, 402));

        assetsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Path", "Type", "Size (KB)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        assetsTable.setToolTipText("");
        assetsTable.setName("AssetsTable"); // NOI18N
        assetsTable.getTableHeader().setReorderingAllowed(false);
        assetsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                assetsTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                assetsTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                assetsTableMouseReleased(evt);
            }
        });
        assetsPane.setViewportView(assetsTable);

        add(assetsPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void assetsTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assetsTableMouseReleased
        if (SwingUtilities.isRightMouseButton(evt)) {
            rightReleaseCallback.onMouseAction(evt);
        }
    }//GEN-LAST:event_assetsTableMouseReleased

    private void assetsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assetsTableMousePressed
        mousePressCallback.onMouseAction(evt);
    }//GEN-LAST:event_assetsTableMousePressed

    private void assetsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assetsTableMouseClicked
        // Check for double clicks on items to open the edit dialog.
        if (SwingUtilities.isLeftMouseButton(evt) && evt.getClickCount() == 2 && assetsTable.getSelectedRow() != -1) {
            doubleClickItemCallback.onMouseAction(evt);
        }
    }//GEN-LAST:event_assetsTableMouseClicked

    /**
     * @param rightReleaseCallback the right click release callback to set.
     */
    public void setRightReleaseCallback(AssetEditorCallbacks rightReleaseCallback) {
        this.rightReleaseCallback = rightReleaseCallback;
    }

    /**
     * @param mousePressCallback the mouse press callback to set.
     */
    public void setMousePressCallback(AssetEditorCallbacks mousePressCallback) {
        this.mousePressCallback = mousePressCallback;
    }

    /**
     * @param doubleClickItemCallback the mouse click callback to set.
     */
    public void setDoubleClickItemCallback(AssetEditorCallbacks doubleClickItemCallback) {
        this.doubleClickItemCallback = doubleClickItemCallback;
    }

    /**
     * Adds a file to the table.
     * @param path the path of the file.
     * @param type the type of file.
     * @param size the size of the file.
     */
    public void addFile(String path, String type, Long size) {
        DefaultTableModel model = (DefaultTableModel) assetsTable.getModel();
        boolean exists = false;
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(path)) {
                exists = true;
                break;
            }
        }
        if (!exists) {
            model.addRow(new Object[]{path, type, size});
        }
    }

    /**
     * Removes an asset given the path.
     * @param path the path of the asset.
     */
    public void removeAsset(String path) {
        DefaultTableModel model = (DefaultTableModel) assetsTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(path)) {
                model.removeRow(i);
                break;
            }
        }
    }

    /**
     * @return the selected assets.
     */
    public String[] getSelectedAssets() {
        int[] selectedRows = assetsTable.getSelectedRows();
        if (selectedRows.length > 0) {
            String[] paths = new String[selectedRows.length];
            DefaultTableModel model = (DefaultTableModel) assetsTable.getModel();
            for (int i = 0; i < selectedRows.length; i++) {
                paths[i] = (String) model.getValueAt(selectedRows[i], 0);
            }
            return paths;
        }
        return null;
    }

    /**
     * Updates an asset given the path.
     * @param path the path of the asset.
     * @param newPath the new path of the asset.
     */
    public void updateAsset(String path, String newPath) {
        DefaultTableModel model = (DefaultTableModel) assetsTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(path)) {
                model.setValueAt(newPath, i, 0);
                break;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane assetsPane;
    private javax.swing.JTable assetsTable;
    // End of variables declaration//GEN-END:variables
}
